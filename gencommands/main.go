package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
)

var fileTemplate = `package commandhandler

import (
  "github.com/Fogapod/KiwiGO/command"
  {{range . -}}
  "{{.ImportPath}}"
  {{end}}
)

//                                      //
// Autogenerated by gencommands/main.go //
// Do not modify                        //
//                                      //

// Builds commands and links aliases with command pointers
// in CommandHandler.CommandMap
func (h *CommandHandler) LoadCommands(strictMode bool) {
  var (
    cmd *command.Command
    err error
  )

  // vanish existing commands
  h.CommandMap = map[string]*command.Command{}

  {{range . -}}
  log.Debug("Building {{.PartialPath}}")
  cmd = command.New(h.Bot, "{{.Name}}")
  err = {{.Name}}.Build(cmd)
  log.Trace("Success")

  if err != nil {
    log.Error("Failed to build command {{.PartialPath}}:\n%s", err)

    if strictMode {
      log.Fatal("Strict mode is set for command loader, exiting")
      h.Bot.Stop(1, true)
    } else {
      log.Debug("Strict mode not set, continuing")
    }
  } else {
    for _, alias := range cmd.Aliases {
      h.CommandMap[alias] = cmd
    }
  }

  {{end}}
}
`

type Command struct {
	Name        string
	ImportPath  string
	PartialPath string
}

var Commands []Command

func main() {
	commandsDir := "commands"

	err := filepath.Walk(commandsDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			panic(err)
		}

		if info.IsDir() {
			return nil
		}

		if !strings.HasSuffix(info.Name(), "_command.go") {
			return nil
		}

		Commands = append(Commands, Command{
			Name:        strings.ToLower(info.Name()[:len(info.Name())-11]),
			ImportPath:  filepath.Join("github.com", "Fogapod", "KiwiGO", path[:strings.LastIndex(path, string(os.PathSeparator))]),
			PartialPath: path,
		})

		return nil
	})

	if err != nil {
		panic(err)
	}

	/* TODO: add checks
	for _, path := range commandPaths {
	  data, err := ioutil.ReadFile(path)
		if err != nil {
			panic(err)
		}

		filepath.Join("github.com", "Fogapod", "KiwiGO", path)
	} */

	sort.Slice(Commands, func(i, j int) bool {
		return Commands[i].Name < Commands[j].Name
	})

	var generatedSource bytes.Buffer

	err = template.Must(template.New("").Parse(fileTemplate)).Execute(&generatedSource, Commands)

	formattedSource, err := format.Source(generatedSource.Bytes())

	if err != nil {
		fmt.Println("Invalid source file generated:", err)
		return
	}

	err = ioutil.WriteFile(filepath.Join("commandhandler", "commands.go"), formattedSource, 0666)
	if err != nil {
		fmt.Println("Failed to write file:", err)
		return
	}
}
