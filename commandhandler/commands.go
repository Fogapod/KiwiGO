package commandhandler

import (
	"github.com/Fogapod/KiwiGO/command"
	"github.com/Fogapod/KiwiGO/commands/utils/avatar"
	"github.com/Fogapod/KiwiGO/commands/utils/help"
	"github.com/Fogapod/KiwiGO/commands/utils/ping"
	"github.com/Fogapod/KiwiGO/commands/utils/uptime"
	"github.com/Fogapod/KiwiGO/commands/utils/user"
	"github.com/Fogapod/KiwiGO/commands/utils/users"
)

//                                      //
// Autogenerated by gencommands/main.go //
// Do not modify                        //
//                                      //

// Builds commands and links aliases with command pointers
// in CommandHandler.CommandMap
func (h *CommandHandler) LoadCommands(strictMode bool) {
	var (
		cmd *command.Command
		err error
	)

	// vanish existing commands
	h.CommandMap = map[string]*command.Command{}

	log.Debug("Building commands/utils/avatar/avatar_command.go")
	cmd = command.New(h.Bot, "avatar", &h.CommandMap)
	err = avatar.Build(cmd)
	log.Trace("Success")

	if err != nil {
		log.Error("Failed to build command commands/utils/avatar/avatar_command.go:\n%s", err)

		if strictMode {
			log.Fatal("Strict mode is set for command loader, exiting")
			h.Bot.Stop(1, true)
		} else {
			log.Debug("Strict mode not set, continuing")
		}
	} else {
		for _, alias := range cmd.Aliases {
			h.CommandMap[alias] = cmd
		}
	}

	log.Debug("Building commands/utils/help/help_command.go")
	cmd = command.New(h.Bot, "help", &h.CommandMap)
	err = help.Build(cmd)
	log.Trace("Success")

	if err != nil {
		log.Error("Failed to build command commands/utils/help/help_command.go:\n%s", err)

		if strictMode {
			log.Fatal("Strict mode is set for command loader, exiting")
			h.Bot.Stop(1, true)
		} else {
			log.Debug("Strict mode not set, continuing")
		}
	} else {
		for _, alias := range cmd.Aliases {
			h.CommandMap[alias] = cmd
		}
	}

	log.Debug("Building commands/utils/ping/ping_command.go")
	cmd = command.New(h.Bot, "ping", &h.CommandMap)
	err = ping.Build(cmd)
	log.Trace("Success")

	if err != nil {
		log.Error("Failed to build command commands/utils/ping/ping_command.go:\n%s", err)

		if strictMode {
			log.Fatal("Strict mode is set for command loader, exiting")
			h.Bot.Stop(1, true)
		} else {
			log.Debug("Strict mode not set, continuing")
		}
	} else {
		for _, alias := range cmd.Aliases {
			h.CommandMap[alias] = cmd
		}
	}

	log.Debug("Building commands/utils/uptime/uptime_command.go")
	cmd = command.New(h.Bot, "uptime", &h.CommandMap)
	err = uptime.Build(cmd)
	log.Trace("Success")

	if err != nil {
		log.Error("Failed to build command commands/utils/uptime/uptime_command.go:\n%s", err)

		if strictMode {
			log.Fatal("Strict mode is set for command loader, exiting")
			h.Bot.Stop(1, true)
		} else {
			log.Debug("Strict mode not set, continuing")
		}
	} else {
		for _, alias := range cmd.Aliases {
			h.CommandMap[alias] = cmd
		}
	}

	log.Debug("Building commands/utils/user/user_command.go")
	cmd = command.New(h.Bot, "user", &h.CommandMap)
	err = user.Build(cmd)
	log.Trace("Success")

	if err != nil {
		log.Error("Failed to build command commands/utils/user/user_command.go:\n%s", err)

		if strictMode {
			log.Fatal("Strict mode is set for command loader, exiting")
			h.Bot.Stop(1, true)
		} else {
			log.Debug("Strict mode not set, continuing")
		}
	} else {
		for _, alias := range cmd.Aliases {
			h.CommandMap[alias] = cmd
		}
	}

	log.Debug("Building commands/utils/users/users_command.go")
	cmd = command.New(h.Bot, "users", &h.CommandMap)
	err = users.Build(cmd)
	log.Trace("Success")

	if err != nil {
		log.Error("Failed to build command commands/utils/users/users_command.go:\n%s", err)

		if strictMode {
			log.Fatal("Strict mode is set for command loader, exiting")
			h.Bot.Stop(1, true)
		} else {
			log.Debug("Strict mode not set, continuing")
		}
	} else {
		for _, alias := range cmd.Aliases {
			h.CommandMap[alias] = cmd
		}
	}

}
